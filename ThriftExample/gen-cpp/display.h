/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef display_H
#define display_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "display_types.h"

namespace person {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class displayIf {
 public:
  virtual ~displayIf() {}
  virtual void add(const std::string& name) = 0;
};

class displayIfFactory {
 public:
  typedef displayIf Handler;

  virtual ~displayIfFactory() {}

  virtual displayIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(displayIf* /* handler */) = 0;
};

class displayIfSingletonFactory : virtual public displayIfFactory {
 public:
  displayIfSingletonFactory(const ::std::shared_ptr<displayIf>& iface) : iface_(iface) {}
  virtual ~displayIfSingletonFactory() {}

  virtual displayIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(displayIf* /* handler */) {}

 protected:
  ::std::shared_ptr<displayIf> iface_;
};

class displayNull : virtual public displayIf {
 public:
  virtual ~displayNull() {}
  void add(const std::string& /* name */) {
    return;
  }
};

typedef struct _display_add_args__isset {
  _display_add_args__isset() : name(false) {}
  bool name :1;
} _display_add_args__isset;

class display_add_args {
 public:

  display_add_args(const display_add_args&);
  display_add_args& operator=(const display_add_args&);
  display_add_args() : name() {
  }

  virtual ~display_add_args() noexcept;
  std::string name;

  _display_add_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const display_add_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const display_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const display_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class display_add_pargs {
 public:


  virtual ~display_add_pargs() noexcept;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class display_add_result {
 public:

  display_add_result(const display_add_result&);
  display_add_result& operator=(const display_add_result&);
  display_add_result() {
  }

  virtual ~display_add_result() noexcept;

  bool operator == (const display_add_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const display_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const display_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class display_add_presult {
 public:


  virtual ~display_add_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class displayClient : virtual public displayIf {
 public:
  displayClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  displayClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(const std::string& name);
  void send_add(const std::string& name);
  void recv_add();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class displayProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<displayIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (displayProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  displayProcessor(::std::shared_ptr<displayIf> iface) :
    iface_(iface) {
    processMap_["add"] = &displayProcessor::process_add;
  }

  virtual ~displayProcessor() {}
};

class displayProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  displayProcessorFactory(const ::std::shared_ptr< displayIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< displayIfFactory > handlerFactory_;
};

class displayMultiface : virtual public displayIf {
 public:
  displayMultiface(std::vector<std::shared_ptr<displayIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~displayMultiface() {}
 protected:
  std::vector<std::shared_ptr<displayIf> > ifaces_;
  displayMultiface() {}
  void add(::std::shared_ptr<displayIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(name);
    }
    ifaces_[i]->add(name);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class displayConcurrentClient : virtual public displayIf {
 public:
  displayConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  displayConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(const std::string& name);
  int32_t send_add(const std::string& name);
  void recv_add(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
